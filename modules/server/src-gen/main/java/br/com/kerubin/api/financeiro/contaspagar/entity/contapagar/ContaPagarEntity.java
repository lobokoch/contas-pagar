/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/

package br.com.kerubin.api.financeiro.contaspagar.entity.contapagar;

import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Id;
import javax.persistence.Column;
import br.com.kerubin.api.database.entity.AuditingEntity;
import javax.persistence.Transient;
import javax.persistence.GeneratedValue;
import org.hibernate.annotations.GenericGenerator;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;
import javax.validation.constraints.NotNull;
import br.com.kerubin.api.financeiro.contaspagar.entity.planoconta.PlanoContaEntity;
import javax.persistence.ManyToOne;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import br.com.kerubin.api.financeiro.contaspagar.FormaPagamento;
import br.com.kerubin.api.financeiro.contaspagar.entity.contabancaria.ContaBancariaEntity;
import br.com.kerubin.api.financeiro.contaspagar.entity.cartaocredito.CartaoCreditoEntity;
import br.com.kerubin.api.financeiro.contaspagar.entity.fornecedor.FornecedorEntity;
import br.com.kerubin.api.financeiro.contaspagar.TipoPagamentoConta;

@Entity
@Table(name = "conta_pagar")
public class ContaPagarEntity extends AuditingEntity {

	@GeneratedValue(generator = "uuid2")
	@GenericGenerator(name = "uuid2", strategy = "uuid2")
	@Id
	@Column(name="id")
	private java.util.UUID id;
	
	@NotBlank(message="\"Descrição da conta\" é obrigatório.")
	@Size(max = 255, message = "\"Descrição da conta\" pode ter no máximo 255 caracteres.")
	@Column(name="descricao")
	private String descricao;
	
	@NotNull(message="\"Plano de contas\" é obrigatório.")
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "plano_contas")
	private PlanoContaEntity planoContas;
	
	@NotNull(message="\"Data de vencimento\" é obrigatório.")
	@Column(name="data_vencimento")
	private java.time.LocalDate dataVencimento;
	
	@NotNull(message="\"Valor total\" é obrigatório.")
	@Column(name="valor")
	private java.math.BigDecimal valor;
	
	@NotNull(message="\"Forma de pagamento\" é obrigatório.")
	@Enumerated(EnumType.STRING)
	@Column(name="forma_pagamento")
	private FormaPagamento formaPagamento;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "conta_bancaria")
	private ContaBancariaEntity contaBancaria;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cartao_credito")
	private CartaoCreditoEntity cartaoCredito;
	
	@Size(max = 255, message = "\"Dados complementares\" pode ter no máximo 255 caracteres.")
	@Column(name="outros_descricao")
	private String outrosDescricao;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "fornecedor")
	private FornecedorEntity fornecedor;
	
	@NotNull(message="\"Conta paga\" é obrigatório.")
	@Column(name="conta_paga")
	private Boolean contaPaga = false;
	
	@Column(name="data_pagamento")
	private java.time.LocalDate dataPagamento;
	
	@Column(name="valor_desconto")
	private java.math.BigDecimal valorDesconto;
	
	@Column(name="valor_multa")
	private java.math.BigDecimal valorMulta;
	
	@Column(name="valor_juros")
	private java.math.BigDecimal valorJuros;
	
	@Column(name="valor_acrescimos")
	private java.math.BigDecimal valorAcrescimos;
	
	@Column(name="valor_pago")
	private java.math.BigDecimal valorPago;
	
	@Transient
	private Boolean maisOpcoes = false;
	
	@Size(max = 255, message = "\"Id da conciliação bancária\" pode ter no máximo 255 caracteres.")
	@Column(name="id_conc_bancaria")
	private String idConcBancaria;
	
	@Size(max = 255, message = "\"Histórico da conciliação bancária\" pode ter no máximo 255 caracteres.")
	@Column(name="hist_conc_bancaria")
	private String histConcBancaria;
	
	@Size(max = 255, message = "\"Documento da conciliação bancária\" pode ter no máximo 255 caracteres.")
	@Column(name="num_doc_conc_bancaria")
	private String numDocConcBancaria;
	
	@Size(max = 255, message = "\"Documento\" pode ter no máximo 255 caracteres.")
	@Column(name="num_documento")
	private String numDocumento;
	
	@Size(max = 1000, message = "\"Observações\" pode ter no máximo 1000 caracteres.")
	@Column(name="observacoes")
	private String observacoes;
	
	@Size(max = 255, message = "\"Identificador para agrupamento da conta\" pode ter no máximo 255 caracteres.")
	@Column(name="agrupador")
	private String agrupador;
	
	@Enumerated(EnumType.STRING)
	@Column(name="tipo_pagamento")
	private TipoPagamentoConta tipoPagamento;
	
	@Column(name="conta_pagar_pai")
	private java.util.UUID contaPagarPai;
	
	public java.util.UUID getId() {
		return id;
	}
	
	public String getDescricao() {
		return descricao;
	}
	
	public PlanoContaEntity getPlanoContas() {
		return planoContas;
	}
	
	public java.time.LocalDate getDataVencimento() {
		return dataVencimento;
	}
	
	public java.math.BigDecimal getValor() {
		return valor;
	}
	
	public FormaPagamento getFormaPagamento() {
		return formaPagamento;
	}
	
	public ContaBancariaEntity getContaBancaria() {
		return contaBancaria;
	}
	
	public CartaoCreditoEntity getCartaoCredito() {
		return cartaoCredito;
	}
	
	public String getOutrosDescricao() {
		return outrosDescricao;
	}
	
	public FornecedorEntity getFornecedor() {
		return fornecedor;
	}
	
	public Boolean getContaPaga() {
		return contaPaga;
	}
	
	public boolean isContaPaga() {
		return Boolean.TRUE.equals(contaPaga);
	}
	
	public java.time.LocalDate getDataPagamento() {
		return dataPagamento;
	}
	
	public java.math.BigDecimal getValorDesconto() {
		return valorDesconto;
	}
	
	public java.math.BigDecimal getValorMulta() {
		return valorMulta;
	}
	
	public java.math.BigDecimal getValorJuros() {
		return valorJuros;
	}
	
	public java.math.BigDecimal getValorAcrescimos() {
		return valorAcrescimos;
	}
	
	public java.math.BigDecimal getValorPago() {
		return valorPago;
	}
	
	public Boolean getMaisOpcoes() {
		return maisOpcoes;
	}
	
	public boolean isMaisOpcoes() {
		return Boolean.TRUE.equals(maisOpcoes);
	}
	
	public String getIdConcBancaria() {
		return idConcBancaria;
	}
	
	public String getHistConcBancaria() {
		return histConcBancaria;
	}
	
	public String getNumDocConcBancaria() {
		return numDocConcBancaria;
	}
	
	public String getNumDocumento() {
		return numDocumento;
	}
	
	public String getObservacoes() {
		return observacoes;
	}
	
	public String getAgrupador() {
		return agrupador;
	}
	
	public TipoPagamentoConta getTipoPagamento() {
		return tipoPagamento;
	}
	
	public java.util.UUID getContaPagarPai() {
		return contaPagarPai;
	}
	
	public void setId(java.util.UUID id) {
		this.id = id;
	}
	
	public void setDescricao(String descricao) {
		this.descricao = descricao != null ? descricao.trim() : descricao; // Chamadas REST fazem trim.
	}
	
	public void setPlanoContas(PlanoContaEntity planoContas) {
		this.planoContas = planoContas;
	}
	
	public void setDataVencimento(java.time.LocalDate dataVencimento) {
		this.dataVencimento = dataVencimento;
	}
	
	public void setValor(java.math.BigDecimal valor) {
		this.valor = valor;
	}
	
	public void setFormaPagamento(FormaPagamento formaPagamento) {
		this.formaPagamento = formaPagamento;
	}
	
	public void setContaBancaria(ContaBancariaEntity contaBancaria) {
		this.contaBancaria = contaBancaria;
	}
	
	public void setCartaoCredito(CartaoCreditoEntity cartaoCredito) {
		this.cartaoCredito = cartaoCredito;
	}
	
	public void setOutrosDescricao(String outrosDescricao) {
		this.outrosDescricao = outrosDescricao != null ? outrosDescricao.trim() : outrosDescricao; // Chamadas REST fazem trim.
	}
	
	public void setFornecedor(FornecedorEntity fornecedor) {
		this.fornecedor = fornecedor;
	}
	
	public void setContaPaga(Boolean contaPaga) {
		this.contaPaga = contaPaga;
	}
	
	public void setDataPagamento(java.time.LocalDate dataPagamento) {
		this.dataPagamento = dataPagamento;
	}
	
	public void setValorDesconto(java.math.BigDecimal valorDesconto) {
		this.valorDesconto = valorDesconto;
	}
	
	public void setValorMulta(java.math.BigDecimal valorMulta) {
		this.valorMulta = valorMulta;
	}
	
	public void setValorJuros(java.math.BigDecimal valorJuros) {
		this.valorJuros = valorJuros;
	}
	
	public void setValorAcrescimos(java.math.BigDecimal valorAcrescimos) {
		this.valorAcrescimos = valorAcrescimos;
	}
	
	public void setValorPago(java.math.BigDecimal valorPago) {
		this.valorPago = valorPago;
	}
	
	public void setMaisOpcoes(Boolean maisOpcoes) {
		this.maisOpcoes = maisOpcoes;
	}
	
	public void setIdConcBancaria(String idConcBancaria) {
		this.idConcBancaria = idConcBancaria != null ? idConcBancaria.trim() : idConcBancaria; // Chamadas REST fazem trim.
	}
	
	public void setHistConcBancaria(String histConcBancaria) {
		this.histConcBancaria = histConcBancaria != null ? histConcBancaria.trim() : histConcBancaria; // Chamadas REST fazem trim.
	}
	
	public void setNumDocConcBancaria(String numDocConcBancaria) {
		this.numDocConcBancaria = numDocConcBancaria != null ? numDocConcBancaria.trim() : numDocConcBancaria; // Chamadas REST fazem trim.
	}
	
	public void setNumDocumento(String numDocumento) {
		this.numDocumento = numDocumento != null ? numDocumento.trim() : numDocumento; // Chamadas REST fazem trim.
	}
	
	public void setObservacoes(String observacoes) {
		this.observacoes = observacoes != null ? observacoes.trim() : observacoes; // Chamadas REST fazem trim.
	}
	
	public void setAgrupador(String agrupador) {
		this.agrupador = agrupador != null ? agrupador.trim() : agrupador; // Chamadas REST fazem trim.
	}
	
	public void setTipoPagamento(TipoPagamentoConta tipoPagamento) {
		this.tipoPagamento = tipoPagamento;
	}
	
	public void setContaPagarPai(java.util.UUID contaPagarPai) {
		this.contaPagarPai = contaPagarPai;
	}
	
	public void assign(ContaPagarEntity source) {
		if (source != null) {
			this.setId(source.getId());
			this.setDescricao(source.getDescricao());
			this.setPlanoContas(source.getPlanoContas());
			this.setDataVencimento(source.getDataVencimento());
			this.setValor(source.getValor());
			this.setFormaPagamento(source.getFormaPagamento());
			this.setContaBancaria(source.getContaBancaria());
			this.setCartaoCredito(source.getCartaoCredito());
			this.setOutrosDescricao(source.getOutrosDescricao());
			this.setFornecedor(source.getFornecedor());
			this.setContaPaga(source.getContaPaga());
			this.setDataPagamento(source.getDataPagamento());
			this.setValorDesconto(source.getValorDesconto());
			this.setValorMulta(source.getValorMulta());
			this.setValorJuros(source.getValorJuros());
			this.setValorAcrescimos(source.getValorAcrescimos());
			this.setValorPago(source.getValorPago());
			this.setMaisOpcoes(source.getMaisOpcoes());
			this.setIdConcBancaria(source.getIdConcBancaria());
			this.setHistConcBancaria(source.getHistConcBancaria());
			this.setNumDocConcBancaria(source.getNumDocConcBancaria());
			this.setNumDocumento(source.getNumDocumento());
			this.setObservacoes(source.getObservacoes());
			this.setAgrupador(source.getAgrupador());
			this.setTipoPagamento(source.getTipoPagamento());
			this.setContaPagarPai(source.getContaPagarPai());
			this.setCreatedBy(source.getCreatedBy());
			this.setCreatedDate(source.getCreatedDate());
			this.setLastModifiedBy(source.getLastModifiedBy());
			this.setLastModifiedDate(source.getLastModifiedDate());
		}
	}
	
	public ContaPagarEntity clone() {
		return clone(new java.util.HashMap<>());
	}
	
	public ContaPagarEntity clone(java.util.Map<Object, Object> visited) {
		if (visited.containsKey(this)) {
			return (ContaPagarEntity) visited.get(this);
		}
				
		ContaPagarEntity theClone = new ContaPagarEntity();
		visited.put(this, theClone);
		
		theClone.setId(this.getId());
		theClone.setDescricao(this.getDescricao());
		theClone.setPlanoContas(this.getPlanoContas() != null ? this.getPlanoContas().clone(visited) : null);
		theClone.setDataVencimento(this.getDataVencimento());
		theClone.setValor(this.getValor());
		theClone.setFormaPagamento(this.getFormaPagamento());
		theClone.setContaBancaria(this.getContaBancaria() != null ? this.getContaBancaria().clone(visited) : null);
		theClone.setCartaoCredito(this.getCartaoCredito() != null ? this.getCartaoCredito().clone(visited) : null);
		theClone.setOutrosDescricao(this.getOutrosDescricao());
		theClone.setFornecedor(this.getFornecedor() != null ? this.getFornecedor().clone(visited) : null);
		theClone.setContaPaga(this.getContaPaga());
		theClone.setDataPagamento(this.getDataPagamento());
		theClone.setValorDesconto(this.getValorDesconto());
		theClone.setValorMulta(this.getValorMulta());
		theClone.setValorJuros(this.getValorJuros());
		theClone.setValorAcrescimos(this.getValorAcrescimos());
		theClone.setValorPago(this.getValorPago());
		theClone.setMaisOpcoes(this.getMaisOpcoes());
		theClone.setIdConcBancaria(this.getIdConcBancaria());
		theClone.setHistConcBancaria(this.getHistConcBancaria());
		theClone.setNumDocConcBancaria(this.getNumDocConcBancaria());
		theClone.setNumDocumento(this.getNumDocumento());
		theClone.setObservacoes(this.getObservacoes());
		theClone.setAgrupador(this.getAgrupador());
		theClone.setTipoPagamento(this.getTipoPagamento());
		theClone.setContaPagarPai(this.getContaPagarPai());
		theClone.setCreatedBy(this.getCreatedBy());
		theClone.setCreatedDate(this.getCreatedDate());
		theClone.setLastModifiedBy(this.getLastModifiedBy());
		theClone.setLastModifiedDate(this.getLastModifiedDate());
		
		return theClone;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ContaPagarEntity other = (ContaPagarEntity) obj;
			
		
		// Field: id
		if (id == null) {
			if (other.id != null) {
				return false;
			}
		} else if (!id.equals(other.id))
			return false;
		
		// Field: descricao
		if (descricao == null) {
			if (other.descricao != null) {
				return false;
			}
		} else if (!descricao.equals(other.descricao))
			return false;
		
		// Field: planoContas
		if (planoContas == null) {
			if (other.planoContas != null) {
				return false;
			}
		} else if (planoContas.getId() == null) {
			if (other.planoContas.getId() != null)
				return false;
		} else if (!planoContas.getId().equals(other.planoContas.getId())) 
			return false;
		
		// Field: dataVencimento
		if (dataVencimento == null) {
			if (other.dataVencimento != null) {
				return false;
			}
		} else if (!dataVencimento.equals(other.dataVencimento))
			return false;
		
		// Field: valor
		if (valor == null) {
			if (other.valor != null) {
				return false;
			}
		} else if (!valor.equals(other.valor))
			return false;
		
		// Field: formaPagamento
		if (formaPagamento == null) {
			if (other.formaPagamento != null) {
				return false;
			}
		} else if (!formaPagamento.equals(other.formaPagamento))
			return false;
		
		// Field: contaBancaria
		if (contaBancaria == null) {
			if (other.contaBancaria != null) {
				return false;
			}
		} else if (contaBancaria.getId() == null) {
			if (other.contaBancaria.getId() != null)
				return false;
		} else if (!contaBancaria.getId().equals(other.contaBancaria.getId())) 
			return false;
		
		// Field: cartaoCredito
		if (cartaoCredito == null) {
			if (other.cartaoCredito != null) {
				return false;
			}
		} else if (cartaoCredito.getId() == null) {
			if (other.cartaoCredito.getId() != null)
				return false;
		} else if (!cartaoCredito.getId().equals(other.cartaoCredito.getId())) 
			return false;
		
		// Field: outrosDescricao
		if (outrosDescricao == null) {
			if (other.outrosDescricao != null) {
				return false;
			}
		} else if (!outrosDescricao.equals(other.outrosDescricao))
			return false;
		
		// Field: fornecedor
		if (fornecedor == null) {
			if (other.fornecedor != null) {
				return false;
			}
		} else if (fornecedor.getId() == null) {
			if (other.fornecedor.getId() != null)
				return false;
		} else if (!fornecedor.getId().equals(other.fornecedor.getId())) 
			return false;
		
		// Field: contaPaga
		if (contaPaga == null) {
			if (other.contaPaga != null) {
				return false;
			}
		} else if (!contaPaga.equals(other.contaPaga))
			return false;
		
		// Field: dataPagamento
		if (dataPagamento == null) {
			if (other.dataPagamento != null) {
				return false;
			}
		} else if (!dataPagamento.equals(other.dataPagamento))
			return false;
		
		// Field: valorDesconto
		if (valorDesconto == null) {
			if (other.valorDesconto != null) {
				return false;
			}
		} else if (!valorDesconto.equals(other.valorDesconto))
			return false;
		
		// Field: valorMulta
		if (valorMulta == null) {
			if (other.valorMulta != null) {
				return false;
			}
		} else if (!valorMulta.equals(other.valorMulta))
			return false;
		
		// Field: valorJuros
		if (valorJuros == null) {
			if (other.valorJuros != null) {
				return false;
			}
		} else if (!valorJuros.equals(other.valorJuros))
			return false;
		
		// Field: valorAcrescimos
		if (valorAcrescimos == null) {
			if (other.valorAcrescimos != null) {
				return false;
			}
		} else if (!valorAcrescimos.equals(other.valorAcrescimos))
			return false;
		
		// Field: valorPago
		if (valorPago == null) {
			if (other.valorPago != null) {
				return false;
			}
		} else if (!valorPago.equals(other.valorPago))
			return false;
		
		// Field: maisOpcoes
		if (maisOpcoes == null) {
			if (other.maisOpcoes != null) {
				return false;
			}
		} else if (!maisOpcoes.equals(other.maisOpcoes))
			return false;
		
		// Field: idConcBancaria
		if (idConcBancaria == null) {
			if (other.idConcBancaria != null) {
				return false;
			}
		} else if (!idConcBancaria.equals(other.idConcBancaria))
			return false;
		
		// Field: histConcBancaria
		if (histConcBancaria == null) {
			if (other.histConcBancaria != null) {
				return false;
			}
		} else if (!histConcBancaria.equals(other.histConcBancaria))
			return false;
		
		// Field: numDocConcBancaria
		if (numDocConcBancaria == null) {
			if (other.numDocConcBancaria != null) {
				return false;
			}
		} else if (!numDocConcBancaria.equals(other.numDocConcBancaria))
			return false;
		
		// Field: numDocumento
		if (numDocumento == null) {
			if (other.numDocumento != null) {
				return false;
			}
		} else if (!numDocumento.equals(other.numDocumento))
			return false;
		
		// Field: observacoes
		if (observacoes == null) {
			if (other.observacoes != null) {
				return false;
			}
		} else if (!observacoes.equals(other.observacoes))
			return false;
		
		// Field: agrupador
		if (agrupador == null) {
			if (other.agrupador != null) {
				return false;
			}
		} else if (!agrupador.equals(other.agrupador))
			return false;
		
		// Field: tipoPagamento
		if (tipoPagamento == null) {
			if (other.tipoPagamento != null) {
				return false;
			}
		} else if (!tipoPagamento.equals(other.tipoPagamento))
			return false;
		
		// Field: contaPagarPai
		if (contaPagarPai == null) {
			if (other.contaPagarPai != null) {
				return false;
			}
		} else if (!contaPagarPai.equals(other.contaPagarPai))
			return false;
		
		// Field: createdBy
		if (createdBy == null) {
			if (other.createdBy != null) {
				return false;
			}
		} else if (!createdBy.equals(other.createdBy))
			return false;
		
		// Field: createdDate
		if (createdDate == null) {
			if (other.createdDate != null) {
				return false;
			}
		} else if (!createdDate.equals(other.createdDate))
			return false;
		
		// Field: lastModifiedBy
		if (lastModifiedBy == null) {
			if (other.lastModifiedBy != null) {
				return false;
			}
		} else if (!lastModifiedBy.equals(other.lastModifiedBy))
			return false;
		
		// Field: lastModifiedDate
		if (lastModifiedDate == null) {
			if (other.lastModifiedDate != null) {
				return false;
			}
		} else if (!lastModifiedDate.equals(other.lastModifiedDate))
			return false;
		
		return true;
	}
	
	@Override
	public int hashCode() {
		return 31;
	}
	
	/* 
	@Override
	public String toString() {
		// Enabling toString for JPA entities will implicitly trigger lazy loading on all fields.
	}
	*/

}
