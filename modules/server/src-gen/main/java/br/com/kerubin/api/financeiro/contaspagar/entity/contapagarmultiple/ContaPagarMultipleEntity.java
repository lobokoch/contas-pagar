/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/

package br.com.kerubin.api.financeiro.contaspagar.entity.contapagarmultiple;

import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Id;
import javax.persistence.Column;
import br.com.kerubin.api.database.entity.AuditingEntity;
import javax.persistence.Transient;
import javax.persistence.GeneratedValue;
import org.hibernate.annotations.GenericGenerator;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.PastOrPresent;
import javax.validation.constraints.Positive;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;
import br.com.kerubin.api.financeiro.contaspagar.entity.fornecedor.FornecedorEntity;
import javax.persistence.ManyToOne;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import br.com.kerubin.api.financeiro.contaspagar.entity.planoconta.PlanoContaEntity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import br.com.kerubin.api.financeiro.contaspagar.FormaPagamento;
import br.com.kerubin.api.financeiro.contaspagar.entity.contabancaria.ContaBancariaEntity;
import br.com.kerubin.api.financeiro.contaspagar.entity.cartaocredito.CartaoCreditoEntity;
import br.com.kerubin.api.financeiro.contaspagar.entity.contapagar.ContaPagarEntity;

@Entity
@Table(name = "conta_pagar_multiple")
public class ContaPagarMultipleEntity extends AuditingEntity {

	@GeneratedValue(generator = "uuid2")
	@GenericGenerator(name = "uuid2", strategy = "uuid2")
	@Id
	@Column(name="id")
	private java.util.UUID id;
	
	@NotNull(message="\"Data\" é obrigatório.")
	@PastOrPresent(message="A data de pagamento não deve ser uma data futura.")
	@Column(name="data_pagamento")
	private java.time.LocalDate dataPagamento;
	
	@NotNull(message="\"Valor\" é obrigatório.")
	@Positive(message="O valor pago deve ser maior do zero.")
	@Column(name="valor_pago")
	private java.math.BigDecimal valorPago;
	
	@NotBlank(message="\"Descrição\" é obrigatório.")
	@Size(max = 255, message = "\"Descrição\" pode ter no máximo 255 caracteres.")
	@Column(name="descricao")
	private String descricao;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "fornecedor")
	private FornecedorEntity fornecedor;
	
	@Transient
	private Boolean maisOpcoes = false;
	
	@NotNull(message="\"Plano de contas\" é obrigatório.")
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "plano_contas")
	private PlanoContaEntity planoContas;
	
	@NotNull(message="\"Forma de pagamento\" é obrigatório.")
	@Enumerated(EnumType.STRING)
	@Column(name="forma_pagamento")
	private FormaPagamento formaPagamento;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "conta_bancaria")
	private ContaBancariaEntity contaBancaria;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cartao_credito")
	private CartaoCreditoEntity cartaoCredito;
	
	@Size(max = 255, message = "\"Dados complementares\" pode ter no máximo 255 caracteres.")
	@Column(name="outros_descricao")
	private String outrosDescricao;
	
	@NotNull(message="\"Conta a pagar pai\" é obrigatório.")
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "conta_pagar")
	private ContaPagarEntity contaPagar;
	
	public java.util.UUID getId() {
		return id;
	}
	
	public java.time.LocalDate getDataPagamento() {
		return dataPagamento;
	}
	
	public java.math.BigDecimal getValorPago() {
		return valorPago;
	}
	
	public String getDescricao() {
		return descricao;
	}
	
	public FornecedorEntity getFornecedor() {
		return fornecedor;
	}
	
	public Boolean getMaisOpcoes() {
		return maisOpcoes;
	}
	
	public PlanoContaEntity getPlanoContas() {
		return planoContas;
	}
	
	public FormaPagamento getFormaPagamento() {
		return formaPagamento;
	}
	
	public ContaBancariaEntity getContaBancaria() {
		return contaBancaria;
	}
	
	public CartaoCreditoEntity getCartaoCredito() {
		return cartaoCredito;
	}
	
	public String getOutrosDescricao() {
		return outrosDescricao;
	}
	
	public ContaPagarEntity getContaPagar() {
		return contaPagar;
	}
	
	public void setId(java.util.UUID id) {
		this.id = id;
	}
	
	public void setDataPagamento(java.time.LocalDate dataPagamento) {
		this.dataPagamento = dataPagamento;
	}
	
	public void setValorPago(java.math.BigDecimal valorPago) {
		this.valorPago = valorPago;
	}
	
	public void setDescricao(String descricao) {
		this.descricao = descricao != null ? descricao.trim() : descricao; // Chamadas REST fazem trim.
	}
	
	public void setFornecedor(FornecedorEntity fornecedor) {
		this.fornecedor = fornecedor;
	}
	
	public void setMaisOpcoes(Boolean maisOpcoes) {
		this.maisOpcoes = maisOpcoes;
	}
	
	public void setPlanoContas(PlanoContaEntity planoContas) {
		this.planoContas = planoContas;
	}
	
	public void setFormaPagamento(FormaPagamento formaPagamento) {
		this.formaPagamento = formaPagamento;
	}
	
	public void setContaBancaria(ContaBancariaEntity contaBancaria) {
		this.contaBancaria = contaBancaria;
	}
	
	public void setCartaoCredito(CartaoCreditoEntity cartaoCredito) {
		this.cartaoCredito = cartaoCredito;
	}
	
	public void setOutrosDescricao(String outrosDescricao) {
		this.outrosDescricao = outrosDescricao != null ? outrosDescricao.trim() : outrosDescricao; // Chamadas REST fazem trim.
	}
	
	public void setContaPagar(ContaPagarEntity contaPagar) {
		this.contaPagar = contaPagar;
	}
	
	public void assign(ContaPagarMultipleEntity source) {
		if (source != null) {
			this.setId(source.getId());
			this.setDataPagamento(source.getDataPagamento());
			this.setValorPago(source.getValorPago());
			this.setDescricao(source.getDescricao());
			this.setFornecedor(source.getFornecedor());
			this.setMaisOpcoes(source.getMaisOpcoes());
			this.setPlanoContas(source.getPlanoContas());
			this.setFormaPagamento(source.getFormaPagamento());
			this.setContaBancaria(source.getContaBancaria());
			this.setCartaoCredito(source.getCartaoCredito());
			this.setOutrosDescricao(source.getOutrosDescricao());
			this.setContaPagar(source.getContaPagar());
			this.setCreatedBy(source.getCreatedBy());
			this.setCreatedDate(source.getCreatedDate());
			this.setLastModifiedBy(source.getLastModifiedBy());
			this.setLastModifiedDate(source.getLastModifiedDate());
		}
	}
	
	public ContaPagarMultipleEntity clone() {
		return clone(new java.util.HashMap<>());
	}
	
	public ContaPagarMultipleEntity clone(java.util.Map<Object, Object> visited) {
		if (visited.containsKey(this)) {
			return (ContaPagarMultipleEntity) visited.get(this);
		}
				
		ContaPagarMultipleEntity theClone = new ContaPagarMultipleEntity();
		visited.put(this, theClone);
		
		theClone.setId(this.getId());
		theClone.setDataPagamento(this.getDataPagamento());
		theClone.setValorPago(this.getValorPago());
		theClone.setDescricao(this.getDescricao());
		theClone.setFornecedor(this.getFornecedor() != null ? this.getFornecedor().clone(visited) : null);
		theClone.setMaisOpcoes(this.getMaisOpcoes());
		theClone.setPlanoContas(this.getPlanoContas() != null ? this.getPlanoContas().clone(visited) : null);
		theClone.setFormaPagamento(this.getFormaPagamento());
		theClone.setContaBancaria(this.getContaBancaria() != null ? this.getContaBancaria().clone(visited) : null);
		theClone.setCartaoCredito(this.getCartaoCredito() != null ? this.getCartaoCredito().clone(visited) : null);
		theClone.setOutrosDescricao(this.getOutrosDescricao());
		theClone.setContaPagar(this.getContaPagar() != null ? this.getContaPagar().clone(visited) : null);
		theClone.setCreatedBy(this.getCreatedBy());
		theClone.setCreatedDate(this.getCreatedDate());
		theClone.setLastModifiedBy(this.getLastModifiedBy());
		theClone.setLastModifiedDate(this.getLastModifiedDate());
		
		return theClone;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ContaPagarMultipleEntity other = (ContaPagarMultipleEntity) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		
		return true;
	}
	
	@Override
	public int hashCode() {
		return 31;
	}
	
	/* 
	@Override
	public String toString() {
		// Enabling toString for JPA entities will implicitly trigger lazy loading on all fields.
	}
	*/

}
