/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/

package br.com.kerubin.api.financeiro.contaspagar.entity.contapagarmultiple;

// import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.querydsl.core.types.Predicate;
import com.querydsl.core.types.Projections;
import com.querydsl.jpa.impl.JPAQueryFactory;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;


import br.com.kerubin.api.financeiro.contaspagar.entity.fornecedor.FornecedorAutoComplete;
import br.com.kerubin.api.financeiro.contaspagar.entity.planoconta.PlanoContaAutoComplete;
import br.com.kerubin.api.financeiro.contaspagar.entity.contabancaria.ContaBancariaAutoComplete;
import br.com.kerubin.api.financeiro.contaspagar.entity.cartaocredito.CartaoCreditoAutoComplete;
import br.com.kerubin.api.financeiro.contaspagar.entity.contapagar.ContaPagarAutoComplete;

import br.com.kerubin.api.financeiro.contaspagar.entity.fornecedor.FornecedorRepository;
import br.com.kerubin.api.financeiro.contaspagar.entity.planoconta.PlanoContaRepository;
import br.com.kerubin.api.financeiro.contaspagar.entity.contabancaria.ContaBancariaRepository;
import br.com.kerubin.api.financeiro.contaspagar.entity.cartaocredito.CartaoCreditoRepository;
import br.com.kerubin.api.financeiro.contaspagar.entity.contapagar.ContaPagarBaseRepository;

import java.util.Collection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.Objects;
import java.util.Optional;
import java.math.BigDecimal;
 
@Service
public class ContaPagarMultipleServiceImpl implements ContaPagarMultipleService {
	
	@PersistenceContext
	private EntityManager em;
	
	@Autowired
	private ContaPagarMultipleRepository contaPagarMultipleRepository;
	
	@Autowired
	private ContaPagarMultipleListFilterPredicate contaPagarMultipleListFilterPredicate;
	
	
	@Autowired
	private FornecedorRepository fornecedorRepository;
	
	@Autowired
	private PlanoContaRepository planoContaRepository;
	
	@Autowired
	private ContaBancariaRepository contaBancariaRepository;
	
	@Autowired
	private CartaoCreditoRepository cartaoCreditoRepository;
	
	@Autowired
	private ContaPagarBaseRepository contaPagarBaseRepository;
	
	
	@Transactional
	@Override
	public ContaPagarMultipleEntity create(ContaPagarMultipleEntity contaPagarMultipleEntity) {
		doRulesFormBeforeSave(contaPagarMultipleEntity);
		return contaPagarMultipleRepository.save(contaPagarMultipleEntity);
	}
	
	@Transactional(readOnly = true)
	@Override
	public ContaPagarMultipleEntity read(java.util.UUID id) {
		return getContaPagarMultipleEntity(id);
	}
	
	@Transactional
	@Override
	public ContaPagarMultipleEntity update(java.util.UUID id, ContaPagarMultipleEntity contaPagarMultipleEntity) {
		doRulesFormBeforeSave(contaPagarMultipleEntity);
		// ContaPagarMultipleEntity entity = getContaPagarMultipleEntity(id);
		// BeanUtils.copyProperties(contaPagarMultipleEntity, entity, "id");
		// entity = contaPagarMultipleRepository.save(entity);
		
		ContaPagarMultipleEntity entity = contaPagarMultipleRepository.save(contaPagarMultipleEntity);
		
		return entity;
	}
	
	private void doRulesFormBeforeSave(ContaPagarMultipleEntity contaPagarMultiple) {
		
		if (Objects.isNull(contaPagarMultiple.getContaPagar()) || Objects.isNull(contaPagarMultiple.getContaPagar().getId())) {
			throw new IllegalStateException("A conta pai não existe ainda ou não possui um identificador válido.");
		}
		
	}
	
	
	@Transactional
	@Override
	public void delete(java.util.UUID id) {
		
		// Delete it.
		contaPagarMultipleRepository.deleteById(id);
		
		// Force flush to the database, for relationship validation and must throw exception because of this here.
		contaPagarMultipleRepository.flush();
		
	}
	
	@Transactional
	@Override
	public void deleteInBulk(java.util.List<java.util.UUID> idList) {
		// Delete it.
		contaPagarMultipleRepository.deleteInBulk(idList);
		
		// Force flush to the database, for relationship validation and must throw exception because of this here.
		contaPagarMultipleRepository.flush();
	}
	
	
	@Transactional(readOnly = true)
	@Override
	public Page<ContaPagarMultipleEntity> list(ContaPagarMultipleListFilter contaPagarMultipleListFilter, Pageable pageable) {
		Predicate predicate = contaPagarMultipleListFilterPredicate.mountAndGetPredicate(contaPagarMultipleListFilter);
		
		Page<ContaPagarMultipleEntity> resultPage = contaPagarMultipleRepository.findAll(predicate, pageable);
		return resultPage;
	}
	
	@Transactional(readOnly = true)
	protected ContaPagarMultipleEntity getContaPagarMultipleEntity(java.util.UUID id) {
		Optional<ContaPagarMultipleEntity> contaPagarMultipleEntity = contaPagarMultipleRepository.findById(id);
		if (!contaPagarMultipleEntity.isPresent()) {
			throw new IllegalArgumentException("ContaPagarMultiple not found:" + id.toString());
		}
		return contaPagarMultipleEntity.get();
	}
	
	@Transactional(readOnly = true)
	@Override
	public Collection<ContaPagarMultipleAutoComplete> autoComplete(String query) {
		Collection<ContaPagarMultipleAutoComplete> result = contaPagarMultipleRepository.autoComplete(query);
		return result;
	}
	
	// Begin relationships autoComplete 
	@Transactional(readOnly = true)
	@Override
	public Collection<FornecedorAutoComplete> fornecedorFornecedorAutoComplete(String query) {
		Collection<FornecedorAutoComplete> result = fornecedorRepository.autoComplete(query);
		return result;
	}
	
	@Transactional(readOnly = true)
	@Override
	public Collection<PlanoContaAutoComplete> planoContaPlanoContasAutoComplete(String query) {
		Collection<PlanoContaAutoComplete> result = planoContaRepository.autoComplete(query);
		return result;
	}
	
	@Transactional(readOnly = true)
	@Override
	public Collection<ContaBancariaAutoComplete> contaBancariaContaBancariaAutoComplete(String query) {
		Collection<ContaBancariaAutoComplete> result = contaBancariaRepository.autoComplete(query);
		return result;
	}
	
	@Transactional(readOnly = true)
	@Override
	public Collection<CartaoCreditoAutoComplete> cartaoCreditoCartaoCreditoAutoComplete(String query) {
		Collection<CartaoCreditoAutoComplete> result = cartaoCreditoRepository.autoComplete(query);
		return result;
	}
	
	@Transactional(readOnly = true)
	@Override
	public Collection<ContaPagarAutoComplete> contaPagarContaPagarAutoComplete(String query) {
		Collection<ContaPagarAutoComplete> result = contaPagarBaseRepository.autoComplete(query);
		return result;
	}
	
	// End relationships autoComplete
	
	
	@Transactional(readOnly = true)
	@Override
	public ContaPagarMultipleSumFields getContaPagarMultipleSumFields(ContaPagarMultipleListFilter contaPagarMultipleListFilter) {
		Predicate predicate = contaPagarMultipleListFilterPredicate.mountAndGetPredicate(contaPagarMultipleListFilter);
		
		QContaPagarMultipleEntity qEntity = QContaPagarMultipleEntity.contaPagarMultipleEntity;
		JPAQueryFactory query = new JPAQueryFactory(em);
		ContaPagarMultipleSumFields result = query.select(
				Projections.bean(ContaPagarMultipleSumFields.class, 
						qEntity.valorPago.sum().coalesce(BigDecimal.ZERO).as("sumValorPago")
				))
		.from(qEntity)
		.where(predicate)
		.fetchOne();
		
		return result;
	}
	
}
