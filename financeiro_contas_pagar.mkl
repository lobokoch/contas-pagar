@label("Financeiro")
domain financeiro

@messagingEventHandler
@webAnalitycs(tagId: "UA-157001792-1" onlyInProduction: true)
@enableDoc
@label("Contas a pagar")
service contas_pagar { //xxx
	
	config {
		groupId: "br.com.kerubin.api"
		version: "1.0.0"
		cloudConfigUri: "http://localhost:9091"
		servicePort: 0
		messagingCore {version:"1.0.0"}
		databaseCore {version:"1.0.0"}
	}
	
	dependency {
		groupId: "br.com.kerubin.api"
		artifactId: "financeiro-planocontas-client"
		version: "1.0.0" 
	}
	
	dependency {
		groupId: "br.com.kerubin.api"
		artifactId: "cadastros-banco-client"
		version: "1.0.0" 
	}
	
	dependency {
		groupId: "br.com.kerubin.api"
		artifactId: "cadastros-fornecedor-client"
		version: "1.0.0" 
	}
	
	@enableWebCustomService
	@auditing
	@baseRepository
	@label(title:"Contas a pagar" shortTitle: "Conta a pagar") //
	@help(text: "Nesta tela, cadastre novas contas a pagar. Após tê-la pago, acesse novamente seu registro e marquê-a como Conta paga e informe também os demais dados de pagamento.")
	// @publishEvents(events=[updated])
	entity ContaPagar {
		
		////////////////////////////////////////
		descricao: string
		publishedInEvents
		label: "Descrição da conta"
		listFilter(many: "Contas")
		web(styleClass: "ui-md-6")
		help(text: "Informe uma descrição para esta conta a pagar, exemplo: Luz, Combustível, Aluguel, Mensalidade da escola.")
		unaccent
		
		planoContas: refers PlanoConta manyToOne
		// listFilter(many: "Plano de Contas")
		publishedInEvents
		web(styleClass: "ui-md-6")
		help(text: "Associa contas diferentes a uma categoria mais geral. Por exemplo, contas de: Luz, Água, Gás, Aluguel e Condomínio poderiam pertencer ao Plano de contas: Habitação.")
		/////////////////////////////////////
		
		dataVencimento: date
		label: "Data de vencimento"
		listFilter(between: "Vencimento de;Até;Intervalo de tempo")  
		web(styleClass: "ui-md-2")
		sort(order: asc position: 0)
		help(text: "Informe a data de vencimento da conta. Esta data você encontra no documento da conta. Por exemplo, na fatura da Luz.")
		
		valor: money 
		label: "Valor total"
		sum(styleClass:"kb-conta-valor-apagar" label:"A")
		web(styleClass: "ui-md-2") //
		listFilter(between: "Contas com valores de;até;" styleClass: "ui-md-3")
		sort(order: desc position: 1)
		help(text: "Informe o valor total que você terá que pagar por esta conta.")
		
		formaPagamento: FormaPagamento
		publishedInEvents
		label: "Forma de pagamento"
		web(styleClass: "ui-md-2")
		listFilter(isEqualTo: "Forma de pagamento" styleClass: "ui-md-4")
		help(text: "Escolha a forma de pagamento que será ou foi utilizada para pagar esta conta.")
		//--
		
		contaBancaria: refers ContaBancaria? manyToOne 
		publishedInEvents
		grid(hidden)
		label: "Conta bancária"
		web(styleClass: "ui-md-6")
		help(text: "Escolha a conta bancária que foi ou será utilizada para pagar esta conta.")
		
		cartaoCredito: refers CartaoCredito? manyToOne
		publishedInEvents
		label: "Cartão de crédito"
		grid(hidden)
		web(styleClass: "ui-md-6")
		help(text: "Escolha o cartão de crédito que foi ou será utilizado para pagar esta conta.")
		
		outrosDescricao: string?
		label: "Dados complementares"
		web(styleClass: "ui-md-6")
		grid(hidden)
		help(text: "Caso tenha, informe dados adicionais referente a forma de pagamento informada.")
		///////////////////////////////
		
		separator /* SEPARATOR */
		fornecedor: refers Fornecedor? manyToOne ////
		publishedInEvents
		web(styleClass: "ui-md-12")
		help(text: "Caso tenha, escolha o fornecedor que originou esta conta.")
		
		/////////////////////////////////
		separator /* SEPARATOR */
		contaPaga: boolean default: false
		publishedInEvents
		label: "Conta paga"
		grid(hidden) 
		web(styleClass: "ui-md-12")
		help(text: "Ative esta opção somente quando a conta já tiver sido paga. Neste caso, CONFIRA e informe OS DADOS DO PAGAMENTO, como por exemplo: Data do pagamento e Valor total pago.")
		onChange
		////////////////////////////////////
		
		//--
		dataPagamento: date? 
		publishedInEvents
		label: "Data do pagamento"
		listFilter(isNotNull_isNull: "Pagas;Em aberto" default:"isNull" /*styleClass: "ui-md-4"*/ containerStyleClass: "ui-md-4") 
		web(styleClass: "ui-md-2")
		help(text: "Informe a data em que esta conta foi paga. Ao informar a data do pagamento, o campo Valor total pago é sugerido com o Valor total automaticamente.")
		
		valorDesconto: money? 
		sum
		label: "Descontos"
		grid(hidden ) 
		web(styleClass: "ui-md-2")
		
		valorMulta: money? 
		sum
		label: "Multas"
		grid(hidden) 
		web(styleClass: "ui-md-2")
		
		valorJuros: money? 
		sum
		label: "Juros mora"
		grid(hidden) 
		web(styleClass: "ui-md-2")
		
		valorAcrescimos: money? 
		sum
		label: "Acréscimos"
		grid(hidden) 
		web(styleClass: "ui-md-2")
		
		valorPago: money? 
		publishedInEvents
		sum(styleClass:"kb-conta-valor-pago" label:"B")
		label: "Valor total pago"
		web(styleClass: "ui-md-2")
		help(text: "Valor total que foi pago por esta conta. Caso informe algum dos campos: Descontos, Multas, Juros mora ou Acréscimos, o valor total pago é calculado automaticamente.")
		///////////////////////////////////////
		
		
		/////////////////////////////
		separator
		maisOpcoes: boolean? transient
		label: "Mostrar mais opções"
		help(text: "Mostra ou oculta opções extras para a conta.")
		web(styleClass: "ui-md-12")
		grid(hidden)
		
		///////
		// Begin conciliação bancária
		separator
		idConcBancaria: string? 
		label: "Id da conciliação bancária"
		grid(hidden) 
		web(styleClass: "ui-md-4" readOnly)
		listFilter(isNotNull: "Baixa via conc. banc." containerStyleClass: "ui-md-4")
		help(text: "Identificador da conciliação bancária (baixa da conta via importação de extrato bancário).")
		
		histConcBancaria: string?
		label: "Histórico da conciliação bancária"
		grid(hidden)
		web(styleClass: "ui-md-5" readOnly)
		listFilter(many: "Histórico da conciliação bancária" containerStyleClass: "ui-md-6")
		help(text: "Descrição da transação bancária (baixa da conta via importação de extrato bancário).")
		
		separator(before: false after: true)
		numDocConcBancaria: string? 
		label: "Documento da conciliação bancária"
		grid(hidden) 
		web(styleClass: "ui-md-3" readOnly)
		help(text: "Documento da transação bancária (baixa da conta via importação de extrato bancário).")
		// End conciliação bancária
		/////////////
		
		numDocumento: string? 
		publishedInEvents
		label: "Documento"
		grid(hidden) 
		web(styleClass: "ui-md-12")
		help(text: "Informe caso a conta tenha um documento relacionado.")
		
		observacoes: string[1000]? 
		label: "Observações"
		grid(hidden) 
		web(styleClass: "ui-md-12")
		
		agrupador: string ? 
		label: "Identificador para agrupamento da conta"
		web(styleClass: "ui-md-12")
		listFilter(many: "Agrupador:" containerStyleClass: "ui-md-12")
		grid(hidden) 
		help(text: "Informe um texto para agrupar contas iguais a esta. Você poderá filtrar todas as contas que possuem o mesmo agrupador, por exemplo: luz_2020.")
		
		tipoPagamento: TipoPagamentoConta?
		publishedInEvents
		web(styleClass: "ui-md-12")
		// grid(hidden)
		hidden
		help(text: "Tipo do pagamento dessa conta, simples ou múltiplos.")
		
		contaPagarPai: uuid?
		publishedInEvents
		label: "Identificador da conta pai"
		web(styleClass: "ui-md-12")
		grid(hidden)
		hidden
		help(text: "Identificador da conta a pagar pai desta conta.")
		
		rules {
			
			/*with(form.actions)
				.apply(
					crudButtons(
						buttonSave(tooltip: "Abrir caixa" label: "Abrir caixa" cssClass: "ui-button-success" icon: "pi pi-lock-open")						
						buttonNew(tooltip: "Abrir caixa" label: "Abrir caixa" cssClass: "ui-button-success" icon: "pi pi-lock-open")						
						buttonBack(tooltip: "Abrir caixa" label: "Abrir caixa" cssClass: "ui-button-success" icon: "pi pi-lock-open")						
					)
				)*/
				
			with(form.beforeSave)
			.apply(error('Foi informada a data de pagamento para a conta, porém ela não foi marcada como conta paga.'))
			.when(contaPaga.isNotTrue and dataPagamento.isNotNull)
			
			with(form.beforeSave)
			.apply(error('A data do pagamento deve ser informada para poder pagar a conta.'))
			.when(contaPaga.isTrue and tipoPagamento.isEquals(TipoPagamentoConta.SINGLE) and dataPagamento.isNull)
			
			with(form.beforeSave)
			.apply(error('A data do pagamento não pode ser maior do que a data de hoje ({0}).', ['today']))
			.when(contaPaga.isTrue and tipoPagamento.isEquals(TipoPagamentoConta.SINGLE) and dataPagamento.isAfter(today))
			
			with(form.beforeSave)
			.apply(error('O valor total pago deve ser informado para poder pagar a conta.'))
			.when(contaPaga.isTrue and tipoPagamento.isEquals(TipoPagamentoConta.SINGLE) and valorPago.isNull)
				
			with(numDocumento).apply(hiddeComponent).when(maisOpcoes.isNotTrue)
			with(observacoes).apply(hiddeComponent).when(maisOpcoes.isNotTrue)
			with(agrupador).apply(hiddeComponent).when(maisOpcoes.isNotTrue)
				
			with(dataPagamento).apply(hiddeComponent).when(contaPaga.isNotTrue)
			with(valorDesconto).apply(hiddeComponent).when(contaPaga.isNotTrue)
			with(valorMulta).apply(hiddeComponent).when(contaPaga.isNotTrue)
			with(valorJuros).apply(hiddeComponent).when(contaPaga.isNotTrue)
			with(valorAcrescimos).apply(hiddeComponent).when(contaPaga.isNotTrue)
			with(valorPago).apply(hiddeComponent).when(contaPaga.isNotTrue)
		
			with(valorPago)
				.apply(equation(valor - valorDesconto + valorMulta + valorJuros + valorAcrescimos))
				.when(contaPaga.isTrue and tipoPagamento.isEquals(TipoPagamentoConta.SINGLE))
				
			
			with(grid.actions).apply(webActionsColumn{width: "14em"})
			
			with(contaBancaria).apply(hiddeComponent).when(formaPagamento.isNotEquals(FormaPagamento.CONTA_BANCARIA))// 
			with(cartaoCredito).apply(hiddeComponent).when(formaPagamento.isNotEquals(FormaPagamento.CARTAO_CREDITO))
			
			with(outrosDescricao).apply(hiddeComponent)
			.when(formaPagamento.isEquals(FormaPagamento.CONTA_BANCARIA) or formaPagamento.isEquals(FormaPagamento.CARTAO_CREDITO) )
			
			with(idConcBancaria).apply(hiddeComponent).when(maisOpcoes.isNotTrue or idConcBancaria.isNull)
			with(numDocConcBancaria).apply(hiddeComponent).when(maisOpcoes.isNotTrue or numDocConcBancaria.isNull)
			with(histConcBancaria).apply(hiddeComponent).when(maisOpcoes.isNotTrue or numDocConcBancaria.isNull)
			//with(histConcBancaria).apply(styleClass:"hidden").when(numDocConcBancaria.isNull)
			
			// Destaca o estado de vencimento das contas a pagar. ///
			// Destaca as contas vencidas
			with(grid.rows).apply(styleClass: "kb-conta-vencida" label: "Conta vencida").when(contaPaga.isFalse and dataVencimento.isBefore(today))
			// Destaca as contas que vencem hoje
			with(grid.rows).apply(styleClass: "kb-conta-vence-hoje" label: "Conta vence hoje").when(contaPaga.isFalse and dataVencimento.isSame(today))
			// Destaca as contas que vencem amanhã
			with(grid.rows).apply(styleClass: "kb-conta-vence-amanha" label: "Conta vence amanhã").when(contaPaga.isFalse and dataVencimento.isSame(tomorrow))
			
			// Destaca as contas que vencem esta semana
			with(grid.rows).apply(styleClass: "kb-conta-vence-proximos-3-dias" label: "Conta vence nos próximos 3 dias").when(contaPaga.isFalse and dataVencimento.isBetween(today, nextDays(3)))
			
			// Destaca as contas que vencem esta semana
			with(grid.rows)
				.apply(styleClass: "kb-conta-vence-esta-semana" label: "Conta vence esta semana")
				.when(contaPaga.isFalse and dataVencimento.isBetween(today, endOfWeek))
			
			//Destaca as contas já pagas.
			with(grid.rows).apply(styleClass: "kb-conta-paga"  label: "Conta paga").when(contaPaga.isTrue)
		
			with(grid.sumRow.lastCell).apply(equation(valor - valorPago)) // xx
			
			// Action: Baixar conta com data de pagamento igual a data de hoje
			with(grid.actions)
			.apply(contaPaga = true, dataPagamento = today, valorPago = valor)
			.when(contaPaga.isFalse)
			.action(name: baixarContaComDataPagamentoHoje button(tooltip: "Baixar a conta com a data de pagamento igual a data de hoje" icon: "pi pi-clock"))
			
			// Action: Baixar conta com data de pagamento igual a data de vencimento
			with(grid.actions)
			.apply(contaPaga = true, dataPagamento = dataVencimento, valorPago = valor)
			.when(contaPaga.isFalse and dataVencimento.isBefore(today))
			.action(name: baixarContaComDataPagamentoIgualDataVenciento button(tooltip: "Baixar a conta com a data de pagamento igual a data de vencimento" icon: "pi pi-calendar"))
			
			// Action: Estorna conta baixada //
			with(grid.actions)
			.apply(dataPagamento = null, valorPago = null, tipoPagamento = TipoPagamentoConta.SINGLE)
			.when(contaPaga.isTrue and tipoPagamento.isEquals(TipoPagamentoConta.SINGLE))
			//.action(name: estornarPagamentoContaComUmClique button(tooltip: "Estornar o pagamento da conta" icon: "pi pi-arrow-up"))
			.action(name: estornarPagamentoContaComUmClique button(tooltip: "Estornar o pagamento da conta" icon: "pi pi-undo"))
			
			with(form)
				.apply(
					makeCopies(
						title: "Clique aqui para criar várias cópias desta conta" //
						referenceField: dataVencimento 
						grouperField: agrupador
						minCopies: 1
						maxCopies: 120
						hiddeWhen(maisOpcoes.isFalse or contaPaga.isTrue)
					)
				)
				.action(name: fazerCopiasContaPagar button(tooltip: "Criar e salvar as cópias desta conta" label: "Criar cópias" icon: "pi pi-clone"))
			
		}
		
				
	}
	
	// Itens dos lançamentos de pagamentos múltiplos para uma conta a pagar.
	@enableWebCustomService
	@auditing
	// @baseRepository
	@label(title:"Registros de pagamento" shortTitle: "Registro de pagamento") //
	@help(text: "Nesta tela, registre pagamentos para a conta.")
	//@publishEvents(events=[updated])
	entity ContaPagarMultiple {
		
		//--
		dataPagamento: date 
		publishedInEvents
		label: "Data"
		web(styleClass: "ui-md-12")
		validation(name: PastOrPresent message: "A data de pagamento não deve ser uma data futura.")
		help(text: "Informe a data em que o pagamento foi realizado.")
		
		valorPago: money 
		publishedInEvents
		sum(styleClass:"kb-conta-valor-pago")
		label: "Valor"
		web(styleClass: "ui-md-12")
		validation(name: Positive message: "O valor pago deve ser maior do zero.")
		help(text: "Informe o valor total que foi pago.")
		
		descricao: string
		publishedInEvents
		label: "Descrição"
		web(styleClass: "ui-md-12")
		help(text: "Informe uma descrição para o pagamento, exemplo: Abastecida de combustível, Almoço de segunda-feira, Supermercado.")
		
		fornecedor: refers Fornecedor? manyToOne ////
		publishedInEvents
		web(styleClass: "ui-md-12")
		help(text: "Caso queira, escolha o fornecedor que originou o pagamento.")
		
		////////////////////////////////////////
		separator
		maisOpcoes: boolean? transient
		label: "Mostrar mais opções"
		help(text: "Mostra mais campos para o pagamento.")
		web(styleClass: "ui-md-12")
		grid(hidden)
		////////////////////////////////////////
		
		planoContas: refers PlanoConta manyToOne
		publishedInEvents
		web(styleClass: "ui-md-12")
		help(text: "Escolha o plano de contas para deste pagamento.")
		
		formaPagamento: FormaPagamento
		publishedInEvents
		label: "Forma de pagamento"
		web(styleClass: "ui-md-12")
		help(text: "Escolha a forma de pagamento que foi utilizada para fazer este pagamento.")
		//--
		
		contaBancaria: refers ContaBancaria? manyToOne 
		publishedInEvents
		grid(hidden)
		label: "Conta bancária"
		web(styleClass: "ui-md-12")
		help(text: "Escolha a conta bancária que foi utilizada para pagar esta conta.")
		
		cartaoCredito: refers CartaoCredito? manyToOne
		publishedInEvents
		label: "Cartão de crédito"
		grid(hidden)
		web(styleClass: "ui-md-12")
		help(text: "Escolha o cartão de crédito que foi utilizado para pagar esta conta.")
		
		outrosDescricao: string?
		label: "Dados complementares"
		web(styleClass: "ui-md-12")
		grid(hidden)
		help(text: "Caso queira, informe dados adicionais referente a forma de pagamento escolhida.")
		///////////////////////////////
		
		contaPagar: refers ContaPagar manyToOne
		label: "Conta a pagar pai"
		publishedInEvents
		web(styleClass: "ui-md-12")
		grid(hidden)
		help(text: "Conta a pagar pai deste pagamento.")
		hidden
		listFilter(isEqualTo: "Conta a pagar pai")
		
		
		///////
		// Begin conciliação bancária
		separator
		idConcBancaria: string? 
		label: "Id da conciliação bancária"
		grid(hidden) 
		web(styleClass: "ui-md-4" readOnly)
		listFilter(isNotNull: "Baixa via conc. banc." containerStyleClass: "ui-md-4")
		help(text: "Identificador da conciliação bancária (baixa da conta via importação de extrato bancário).")
		
		histConcBancaria: string?
		label: "Histórico da conciliação bancária"
		grid(hidden)
		web(styleClass: "ui-md-5" readOnly)
		listFilter(many: "Histórico da conciliação bancária" containerStyleClass: "ui-md-6")
		help(text: "Descrição da transação bancária (baixa da conta via importação de extrato bancário).")
		
		separator(before: false after: true)
		numDocConcBancaria: string? 
		label: "Documento da conciliação bancária"
		grid(hidden) 
		web(styleClass: "ui-md-3" readOnly)
		help(text: "Documento da transação bancária (baixa da conta via importação de extrato bancário).")
		// End conciliação bancária
		/////////////
		
		rules {
			
			with(form.beforeSave)
			.apply(error('A conta pai não existe ainda ou não possui um identificador válido.'))
			.when(contaPagar.isNull or contaPagar.id.isNull)
				
			with(formaPagamento).apply(hiddeComponent).when(maisOpcoes.isFalse)
			
			with(contaBancaria).apply(hiddeComponent).when(maisOpcoes.isFalse or formaPagamento.isNotEquals(FormaPagamento.CONTA_BANCARIA))
			with(cartaoCredito).apply(hiddeComponent).when(maisOpcoes.isFalse or formaPagamento.isNotEquals(FormaPagamento.CARTAO_CREDITO))
			with(outrosDescricao).apply(hiddeComponent).when(maisOpcoes.isFalse or formaPagamento.isEquals(FormaPagamento.CONTA_BANCARIA) or formaPagamento.isEquals(FormaPagamento.CARTAO_CREDITO) )
			
			with(planoContas).apply(hiddeComponent).when(maisOpcoes.isFalse)
			
			// Conciliação bancária
			with(idConcBancaria).apply(hiddeComponent).when(maisOpcoes.isNotTrue or idConcBancaria.isNull)
			with(numDocConcBancaria).apply(hiddeComponent).when(maisOpcoes.isNotTrue or numDocConcBancaria.isNull)
			with(histConcBancaria).apply(hiddeComponent).when(maisOpcoes.isNotTrue or numDocConcBancaria.isNull)
		}
		
				
	}
	
	@externalEntity
	@subscribe(domain= cadastros, service=fornecedor, events=[created, updated, deleted])
	@label(title: "Fornecedor")
	entity Fornecedor {		
		
		tipoPessoa: TipoPessoa
		
		nome: string
		label: "Nome"
		listFilter(many: "Nome do fornecedor")
		unaccent
		
		cnpjCPF: string?
		label: "Documento (CNPJ/CPF)"
		
		ativo: boolean default: true optional
		label: "Ativo"
		
		
	}
	
	@externalEntity
	@subscribe(domain= cadastros, service=banco, events=[created, updated, deleted])
	@label(title:"Banco")
	entity Banco {
		
		numero: string[20] 
		label: "Número"
		autoComplete
		web(styleClass: "ui-md-4")
		findBy
		
		nome: string 
		label: "Nome"
		autoComplete
		listFilter(many: "Nome do(s) banco(s)")
		web(styleClass: "ui-md-8")
		unaccent
	}
	
	@externalEntity
	@subscribe(domain= cadastros, service=banco, events=[cud])
	@label(title:"Agência bancária")
	entity AgenciaBancaria {
		
		banco: refers Banco manyToOne
		web(styleClass: "ui-md-6")
		
		numeroAgencia: string[50] 
		autoComplete
		label: "Número da agência"
		web(styleClass: "ui-md-5")
		
		digitoAgencia: string[10] 
		autoComplete(result)
		label: "Dígito"
		web(styleClass: "ui-md-1")
		
		endereco: string? 
		autoComplete
		label: "Endereço/localização da agência"
		web(styleClass: "ui-md-6")
		unaccent
		
	}
	
	@externalEntity
	@subscribe(domain= cadastros, service=banco, events=[cud])
	@label(title:"Bandeira de cartão")
	entity BandeiraCartao {
		
		nomeBandeira: string
		autoComplete
		label: "Bandeira do cartão"
		listFilter(many: "Bandeira(s)")
		web(styleClass: "ui-md-12")
		unaccent
	}
	
	@externalEntity
	@subscribe(domain= cadastros, service=banco, events=[cud])
	@label(title:"Conta bancária")
	entity ContaBancaria {
		
		nomeTitular: string
		label: "Nome do títular da conta"
		autoComplete
		web(styleClass: "ui-md-6")
		unaccent
		
		agencia: refers AgenciaBancaria manyToOne
		web(styleClass: "ui-md-4")
		 findBy( ////
			custom: "findByNumeroContaAndAgenciaNumeroAgenciaAndAgenciaBancoNumero(String conta, String agencia, String banco)" 
			documentation: "Busca a conta bancária, pelo número da conta, número da agência e número o banco."
			)
		
		tipoContaBancaria: TipoContaBancaria
		label: "Tipo da conta"
		web(styleClass: "ui-md-2")
		//--
		
		numeroConta: string[30] 
		autoComplete(result)
		label: "Número da conta"
		listFilter(many: "Número da(s) conta(s)")
		web(styleClass: "ui-md-6")
		
		digito: string[10]? 
		label: "Dígito"
		web(styleClass: "ui-md-2")
		
		dataValidade: date?
		mask:"MM/yyyy"
		label: "Validade"
		web(styleClass: "ui-md-2")
		
		ativo: boolean
		label: "Conta ativa"
		web(styleClass: "ui-md-4")
		
	}
	
	@externalEntity
	@subscribe(domain= cadastros, service=banco, events=[cud])
	@label(title:"Cartão de crédito")
	entity CartaoCredito {
		
		//--
		banco: refers Banco manyToOne
		web(styleClass: "ui-md-6")
		
		nomeTitular: string
		autoComplete
		label: "Nome do títular do cartão"
		web(styleClass: "ui-md-6")
		unaccent
		
		//--
		numeroCartao: string[50] 
		autoComplete
		label: "Número do cartão"
		web(styleClass: "ui-md-6")
		
		validade: date?
		label: "Validade"
		mask:"mm/yy"
		web(styleClass: "ui-md-2")
		
		valorLimite: money?
		label: "Limite de crédito"
		web(styleClass: "ui-md-2")
		
		//--
		bandeiraCartao: refers BandeiraCartao manyToOne
		label: "Bandeira do cartão"
		web(styleClass: "ui-md-6")
		
		ativo: boolean
		label: "Cartão ativo"
		web(styleClass: "ui-md-2")
		
	}
	
	@externalEntity
	@subscribe(domain= financeiro, service=plano_contas, events=[cud])
	@label(title:"Plano de contas")
	entity PlanoConta {
		
		codigo: string
		label: "Código"
		autoComplete(data sort)
		web(styleClass: "ui-md-2")
		listFilter(many: "Códigos")
		
		descricao: string
		label: "Descrição"
		autoComplete
		web(styleClass: "ui-md-10")		
		listFilter(many: "Descrições")
		unaccent
		
		tipoFinanceiro: TipoPlanoContaFinanceiro
		
		tipoReceitaDespesa: TipoReceitaDespesa?
		label: "Tipo receita/despesa"
		web(styleClass: "ui-md-2")
		
		planoContaPai: refers PlanoConta? manyToOne
		label: "Plano de conta pai"
		web(styleClass: "ui-md-7")
		
		ativo: boolean default: true // Will be replecated //
		label: "Ativo"
		web(styleClass: "ui-md-1")
		listFilter(isNotNull_isNull: "Ativo;Inativo" default: "isNotNull")
		
		rules { // Somente aceita mensagem de DESPESA no contas a pagar.
			with(subscribe)
				.apply()
				.when(tipoFinanceiro.isEquals(TipoPlanoContaFinanceiro.DESPESA))
		}
		
	}
	
	@label("Forma de pagamento")
	enum FormaPagamento {
		DINHEIRO
		label: "Dinheiro"
		default
		
		CONTA_BANCARIA
		label: "Conta bancária"
		
		CARTAO_CREDITO
		label: "Cartão de crédito"
		
		VALE_REFEICAO
		label: "Vale refeição"
		
		VALE_ALIMENTACAO
		label: "Vale alimentação"
		
		CHEQUE
		label: "Cheque"
		
		OUTROS
		label: "Outros"
	}
	
	// From Plano de Contas /////
	@label("Tipo da receita/despesa")
	enum TipoReceitaDespesa {
		VARIAVEL
		label: "Variável"
		default
		
		FIXO
		label: "Fixa"
	}
	
	@label("Tipo da conta bancária")
	enum TipoContaBancaria { 
		CONTA_CORRENTE
		label: "Conta corrente"
		default
		
		CONTA_POUPANCA
		label: "Conta poupança"
		
		CONTA_SALARIO
		label: "Conta salário"
		
		CONTA_INVESTIMENTO
		label: "Conta investimento"
	}
	
	@label("Tipo financeiro")
	enum TipoPlanoContaFinanceiro {
		RECEITA
		label: "Receita"
		
		DESPESA
		label: "Despesa"
	}
	
	@label("Tipo da pessoa")
	enum TipoPessoa {		
		PESSOA_JURIDICA
		label: "Pessoa jurídica"
		default
		
		PESSOA_FISICA
		label: "Pessoa física"
	}
	
	@label("Tipo do pagamento")
	enum TipoPagamentoConta {		
		
		SINGLE
		label: "Pagamento único"
		default
		
		MULTIPLE
		label: "Pagamentos múltiplos"
	}
}